service: nestjs-serverless-test

plugins:
  - serverless-layers
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-1
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - rds-data:*
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
  environment:
    SERVERLESS_STAGE: ${self:provider.stage}
    ENV: ${self:custom.environments.ENV}
    DB_PORT: 3306
    DB_HOST: !GetAtt RDSProxy.Endpoint

custom:
  defaultStage: dev
  serverless-layers:
    layersDeploymentBucket: in-house-library-api-serverless-bucket
  profiles:
    dev: yuki.nakata
    stg: yuki.nakata
    prd: yuki.nakata
  environments: ${file(./config/config.${opt:stage, self:custom.defaultStage}.yml)}
  secret: ${file(./config/secret/.secret.${opt:stage, self:custom.defaultStage}.yml)}

package:
  individually: true
  include:
    - dist/**
  exclude:
    - '**'

functions:
  testFunc:
    name: in-house-library-api
    handler: dist/handler.handler
    desctiption: "nest.js"
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
    events:
      - http:
          path: '/'
          method: any
      - http:
          path: '{proxy+}'
          method: any

resources:
  Resources:
    ## VPC Resource
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/24
        Tags:
          - { Key: Name, Value: Sample VPC }
    PrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.0/25
        AvailabilityZone: ap-northeast-1a
        Tags:
          - { Key: Name, Value: Sample Private A }
    PrivateSubnetC:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.128/25
        AvailabilityZone: ap-northeast-1c
        Tags:
          - { Key: Name, Value: Sample Private C }
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Lambda Functions
        VpcId: !Ref VPC
        Tags:
          - Key: "Name"
            Value: "LambdaSecurityGroup"
    AuroraSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Aurora
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: 10.0.0.0/24
        Tags:
          - Key: "Name"
            Value: "AuroraSecurityGroup"
      DependsOn: VPC
  
    ## RDS Resource
      DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
          DBSubnetGroupDescription: "SampleDB subnet group"
          DBSubnetGroupName: sampledb-subnet-group
          SubnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetC
      DBCluster:
        Type: AWS::RDS::DBCluster
        Properties:
          DatabaseName: SampleDB
          Engine: aurora-postgresql
          # EngineMode: serverless
          EngineVersion: "11.6"
          MasterUsername: ${self:custom.secret.USER_NAME}
          MasterUserPassword: ${self:custom.secret.PASSWORD}
          DBClusterParameterGroupName: !Ref DBClusterParameterGroup
          DBSubnetGroupName: !Ref DBSubnetGroup
          VpcSecurityGroupIds:
            - !Ref AuroraSecurityGroup
        DependsOn: DBSubnetGroup
      DBClusterParameterGroup:
        Type: AWS::RDS::DBClusterParameterGroup
        Properties:
          Description: A parameter group for aurora
          Family: aurora-postgresql11
          Parameters:
            client_encoding: UTF8
      DBInstance1:
        Type: AWS::RDS::DBInstance
        Properties:
          DBClusterIdentifier: !Ref DBCluster
          DBSubnetGroupName: !Ref DBSubnetGroup
          Engine: aurora-postgresql
          EngineVersion: "11.6"
          DBInstanceClass: db.t3.medium
        DependsOn: DBCluster


    AuroraSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: Sample/aurora
        SecretString: '{"username":"${self:custom.secret.USER_NAME}", "password":"${self:custom.secret.PASSWORD}"}'
    SecretTargetAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref AuroraSecret
        TargetId: !Ref DBCluster
        TargetType: "AWS::RDS::DBCluster"
      DependsOn: DBCluster
    ProxyRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: sample-proxy-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "rds.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: RdsProxyPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "secretsmanager:GetResourcePolicy"
                    - "secretsmanager:GetSecretValue"
                    - "secretsmanager:DescribeSecret"
                    - "secretsmanager:ListSecretVersionIds"
                  Resource:
                    - !Ref AuroraSecret
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: "arn:aws:kms:${self:provider.region}:#{AWS::AccountId}:key/*"
                  Condition:
                    StringEquals:
                      kms:ViaService: "secretsmanager.${self:provider.region}.amazonaws.com"
      DependsOn: AuroraSecret
    RDSProxy:
      Type: AWS::RDS::DBProxy
      Properties:
        DBProxyName: SampleAuroraProxy
        Auth:
          - SecretArn: !Ref AuroraSecret
        VpcSecurityGroupIds:
          - !Ref AuroraSecurityGroup
        VpcSubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetC
        EngineFamily: POSTGRESQL
        RoleArn: !GetAtt ProxyRole.Arn
      DependsOn: AuroraSecret
    DBProxyTargetGroup:
      Type: AWS::RDS::DBProxyTargetGroup
      Properties:
        TargetGroupName: default
        DBProxyName: !Ref RDSProxy
        DBClusterIdentifiers:
          - !Ref DBCluster
      DependsOn: RDSProxy