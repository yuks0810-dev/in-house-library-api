{
  "service": {
    "service": "NestJsServerless",
    "serviceObject": {
      "name": "NestJsServerless"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "ap-northeast-1",
      "stage": "stg",
      "profile": "yuki.nakata",
      "timeout": 30,
      "memorySize": 128,
      "versionFunctions": false,
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue",
            "rds-data:*",
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "*"
        }
      ],
      "environment": {
        "TZ": "Asia/Tokyo"
      },
      "layers": [
        "arn:aws:lambda:ap-northeast-1:184571202268:layer:nestjsserverless-stg-nodejs-default:2"
      ],
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "LmandaFuncLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/in-house-library-api-stg"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "NestJsServerless",
                        "stg",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/in-house-library-api-stg:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/in-house-library-api-stg:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "NestJsServerless",
                    "stg",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-9cddf24e-1c91-461b-8456-e8cf7b336784"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "LmandaFuncLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "LmandaFuncLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/NestJsServerless/stg/1648307476609-2022-03-26T15:11:16.609Z/LmandaFunc.zip"
              },
              "Handler": "s_LmandaFunc.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "in-house-library-api-stg",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TZ": "Asia/Tokyo"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Ref": "InHouseLibrarySecurityGroup"
                  }
                ],
                "SubnetIds": [
                  {
                    "Ref": "InHouseLibraryPrivateSubnet"
                  }
                ]
              },
              "Layers": {
                "$ref": "$[\"service\"][\"provider\"][\"layers\"]"
              }
            },
            "DependsOn": [
              "LmandaFuncLogGroup"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "stg-NestJsServerless",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LmandaFuncLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LmandaFuncLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LmandaFuncLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LmandaFuncLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1648307437421": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "stg"
            },
            "DependsOn": [
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "LmandaFuncLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LmandaFuncLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/NestJsServerless-stg"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "stg",
                        "NestJsServerless",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/NestJsServerless/stg/1648307476609-2022-03-26T15:11:16.609Z/custom-resources.zip"
              },
              "FunctionName": "NestJsServerless-stg-custom-resource-apigw-cw-role",
              "Handler": "api-gateway-cloud-watch-role/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs14.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "InHouseLibraryVPC": {
            "Type": "AWS::EC2::VPC",
            "DeletionPolicy": "Delete",
            "Properties": {
              "CidrBlock": "10.1.0.0/16",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "InHouseLibraryVPC"
                }
              ]
            }
          },
          "InHouseLibraryInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "InHouseLibraryInternetGateway"
                }
              ]
            }
          },
          "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "InHouseLibraryVPC"
              },
              "InternetGatewayId": {
                "Ref": "InHouseLibraryInternetGateway"
              }
            }
          },
          "InHouseLibraryElasticIp": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
              "Domain": "vpc"
            }
          },
          "InHouseLibraryNatGateway": {
            "DependsOn": [
              "InHouseLibraryElasticIp"
            ],
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
              "AllocationId": {
                "Fn::GetAtt": [
                  "InHouseLibraryElasticIp",
                  "AllocationId"
                ]
              },
              "SubnetId": {
                "Ref": "InHouseLibraryPublicSubnet"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "InHouseLibraryNatGateway"
                }
              ]
            }
          },
          "InHouseLibraryPrivateSubnet": {
            "DependsOn": [
              "InHouseLibraryVPC"
            ],
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "InHouseLibraryVPC"
              },
              "CidrBlock": "10.1.1.0/24",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "InHouseLibraryPrivateSubnet"
                }
              ]
            }
          },
          "InHouseLibraryPrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "InHouseLibraryVPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "InHouseLibraryPrivateRouteTable"
                }
              ]
            }
          },
          "InHouseLibraryPrivateRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "InHouseLibraryPrivateRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                "Ref": "InHouseLibraryNatGateway"
              }
            }
          },
          "SubnetRouteTableAssociationPrivateSubnet": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "InHouseLibraryPrivateSubnet"
              },
              "RouteTableId": {
                "Ref": "InHouseLibraryPrivateRouteTable"
              }
            }
          },
          "InHouseLibraryPublicSubnet": {
            "DependsOn": [
              "InHouseLibraryVPC"
            ],
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "InHouseLibraryVPC"
              },
              "CidrBlock": "10.1.11.0/24",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "InHouseLibraryPublicSubnet"
                }
              ]
            }
          },
          "InHouseLibraryPublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "InHouseLibraryVPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "InHouseLibraryPublicRouteTable"
                }
              ]
            }
          },
          "InHouseLibraryPublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "InHouseLibraryPublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InHouseLibraryInternetGateway"
              }
            }
          },
          "SubnetRouteTableAssociationPublicSubnet": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "InHouseLibraryPublicSubnet"
              },
              "RouteTableId": {
                "Ref": "InHouseLibraryPublicRouteTable"
              }
            }
          },
          "InHouseLibraryApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "DeletionPolicy": "Delete",
            "Properties": {
              "EndpointConfiguration": {
                "Types": [
                  "REGIONAL"
                ]
              },
              "Name": "NestJsServerless-stg"
            }
          },
          "InHouseLibrarySecurityGroup": {
            "DependsOn": [
              "InHouseLibraryVPC"
            ],
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "SecurityGroup for InHouseLibrary Functions",
              "VpcId": {
                "Ref": "InHouseLibraryVPC"
              }
            }
          },
          "CWLSubFilterLmandaFuncLogGroupApNortheast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:ap-northeast-1:802587217904:destination:9cddf24e-1c91-461b-8456-e8cf7b336784#7xdKqZlzmmNpM2QY7S#NestJsServerless#stg",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "LmandaFuncLogGroup"
              }
            }
          },
          "CWLSubFilterApiGatewayLogGroupApNortheast1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:ap-northeast-1:802587217904:destination:9cddf24e-1c91-461b-8456-e8cf7b336784#7xdKqZlzmmNpM2QY7S#NestJsServerless#stg",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-NestJsServerless-stg-ServerlessDeploymentBucketName"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            },
            "Export": {
              "Name": "sls-NestJsServerless-stg-EnterpriseLogAccessIamRole"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/stg"
                ]
              ]
            },
            "Export": {
              "Name": "sls-NestJsServerless-stg-ServiceEndpoint"
            }
          },
          "NestjsserverlessDashstgDashnodejsDashdefaultLambdaLayerQualifiedArn": {
            "Value": "arn:aws:lambda:ap-northeast-1:184571202268:layer:nestjsserverless-stg-nodejs-default:2",
            "Export": {
              "Name": "NestjsserverlessDashstgDashnodejsDashdefaultLambdaLayerQualifiedArn"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "custom": {
      "defaultStage": "dev",
      "serverless-layers": {
        "layersDeploymentBucket": "in-house-library-api-serverless-bucket"
      },
      "profiles": {
        "dev": "yuki.nakata",
        "stg": "yuki.nakata",
        "prd": "yuki.nakata"
      }
    },
    "plugins": [
      "serverless-layers",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "LmandaFunc": {
        "name": "in-house-library-api-stg",
        "handler": "s_LmandaFunc.handler",
        "vpc": {
          "securityGroupIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LmandaFuncLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SecurityGroupIds\"]"
          },
          "subnetIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LmandaFuncLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SubnetIds\"]"
          }
        },
        "events": [
          {
            "http": {
              "path": "",
              "method": "any",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "{proxy+}",
              "method": "any",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "s_LmandaFunc.js",
            "serverless_sdk/**"
          ],
          "artifact": "/Users/pc732/Desktop/in-house-library/in-house-library-api/.serverless/LmandaFunc.zip"
        },
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x"
      }
    },
    "resources": {
      "Resources": {
        "InHouseLibraryVPC": {
          "Type": "AWS::EC2::VPC",
          "DeletionPolicy": "Delete",
          "Properties": {
            "CidrBlock": "10.1.0.0/16",
            "Tags": [
              {
                "Key": "Name",
                "Value": "InHouseLibraryVPC"
              }
            ]
          }
        },
        "InHouseLibraryInternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
            "Tags": [
              {
                "Key": "Name",
                "Value": "InHouseLibraryInternetGateway"
              }
            ]
          }
        },
        "VPCGatewayAttachment": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "InHouseLibraryVPC"
            },
            "InternetGatewayId": {
              "Ref": "InHouseLibraryInternetGateway"
            }
          }
        },
        "InHouseLibraryElasticIp": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
            "Domain": "vpc"
          }
        },
        "InHouseLibraryNatGateway": {
          "DependsOn": [
            "InHouseLibraryElasticIp"
          ],
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
            "AllocationId": {
              "Fn::GetAtt": [
                "InHouseLibraryElasticIp",
                "AllocationId"
              ]
            },
            "SubnetId": {
              "Ref": "InHouseLibraryPublicSubnet"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "InHouseLibraryNatGateway"
              }
            ]
          }
        },
        "InHouseLibraryPrivateSubnet": {
          "DependsOn": [
            "InHouseLibraryVPC"
          ],
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "InHouseLibraryVPC"
            },
            "CidrBlock": "10.1.1.0/24",
            "Tags": [
              {
                "Key": "Name",
                "Value": "InHouseLibraryPrivateSubnet"
              }
            ]
          }
        },
        "InHouseLibraryPrivateRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "InHouseLibraryVPC"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "InHouseLibraryPrivateRouteTable"
              }
            ]
          }
        },
        "InHouseLibraryPrivateRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "InHouseLibraryPrivateRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "InHouseLibraryNatGateway"
            }
          }
        },
        "SubnetRouteTableAssociationPrivateSubnet": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "InHouseLibraryPrivateSubnet"
            },
            "RouteTableId": {
              "Ref": "InHouseLibraryPrivateRouteTable"
            }
          }
        },
        "InHouseLibraryPublicSubnet": {
          "DependsOn": [
            "InHouseLibraryVPC"
          ],
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "InHouseLibraryVPC"
            },
            "CidrBlock": "10.1.11.0/24",
            "Tags": [
              {
                "Key": "Name",
                "Value": "InHouseLibraryPublicSubnet"
              }
            ]
          }
        },
        "InHouseLibraryPublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "InHouseLibraryVPC"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "InHouseLibraryPublicRouteTable"
              }
            ]
          }
        },
        "InHouseLibraryPublicRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "InHouseLibraryPublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "InHouseLibraryInternetGateway"
            }
          }
        },
        "SubnetRouteTableAssociationPublicSubnet": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "InHouseLibraryPublicSubnet"
            },
            "RouteTableId": {
              "Ref": "InHouseLibraryPublicRouteTable"
            }
          }
        },
        "InHouseLibraryApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "DeletionPolicy": "Delete",
          "Properties": {
            "EndpointConfiguration": {
              "Types": [
                "REGIONAL"
              ]
            },
            "Name": "NestJsServerless-stg"
          }
        },
        "InHouseLibrarySecurityGroup": {
          "DependsOn": [
            "InHouseLibraryVPC"
          ],
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "SecurityGroup for InHouseLibrary Functions",
            "VpcId": {
              "Ref": "InHouseLibraryVPC"
            }
          }
        }
      },
      "Outputs": {
        "NestjsserverlessDashstgDashnodejsDashdefaultLambdaLayerQualifiedArn": {
          "Value": "arn:aws:lambda:ap-northeast-1:184571202268:layer:nestjsserverless-stg-nodejs-default:2",
          "Export": {
            "Name": "NestjsserverlessDashstgDashnodejsDashdefaultLambdaLayerQualifiedArn"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "nakatayuki",
      "app": "nestjs-serverless-test",
      "service": "NestJsServerless",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "package": {
        "individually": true,
        "include": [
          "dist/**"
        ],
        "exclude": [
          "**",
          "node_modules/**"
        ],
        "artifactsS3KeyDirname": "serverless/NestJsServerless/stg/code-artifacts"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "nestjs-serverless-test",
    "org": "nakatayuki",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "9cddf24e-1c91-461b-8456-e8cf7b336784",
    "appUid": "7xdKqZlzmmNpM2QY7S"
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/NestJsServerless/stg/1648307476609-2022-03-26T15:11:16.609Z",
    "artifact": ""
  }
}